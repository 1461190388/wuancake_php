变量：$开头

由数字、字母、_组成。且不能数字开头



PHP有三种不同的变量作用域
・local（局部）
・global（全局）
・static（静态）


函数之外的变量（类似头文件的感觉）拥有全局（Global）作用域
函数内部的变量（函数内定义的变量）拥有局部（Local）作用域

∴可以在不同的函数中创建名称相同的局部变量


若需要调用全局（Global）变量，需要在函数内部的变量使用Global


var_dump是一个函数，通过此函数可以‘直接输出一个变量的类型和值’，一般用来调试程序。
eg：var_dump(变量);――→

$x = 123;
var_dump($x);――→打印结果为：int(123)


null是数据类型null唯一可能的类型，用以标识变量值是否为空
可以通过把值设置为null，将变量清空。
$x = "hello world";
$x = null
var_dump($x);――→NULL


strlen()函数返回字符串长度，以字符记。（常用于循环和其他函数）

strpos()函数用于检索，如果检索到会返回首个匹配字符所在位置，若未匹配，返回FALSE。（返回检索时，首字符位置是0不是1）


常量以字符或下划线开头，开头无$，且贯穿整个脚本自动全局。
设置常量用difine（）
eg:	define("a","b");――→定义名称为“a”的常量值为b，且变量名称对大小写敏感，既“a != A”

若要变量名称对大小写不敏感，则末尾加true（不写则为默认false）
eg:	define("a","b",true);――→此时“a = A”


/*

x += y	等同于	x = x+y

x -= y	等同于	x = x-y

x *= y	等同于	x = x*y

x /= y	等同于	x = x/y


x %= y	等同于	x = x%y

*/

“.”表示串接符号；“.=”表示串接赋值
（个人理解:）“.”表示已赋值的变量a串接后赋值给b；“.=”表示已赋值变量a串接后重新赋值给a。

eg:
①$a = "hello";
  $b = $a . "world!";
  echo $b;	//输出hello world!

②$a = "hello";
  $a.= "world!";
  echo $a;	//输出hello world!


"<>"与"!="相同，不等于，如果$a不等于$b,则返回true

"!=="不全等，完全不同。如果$a不等于$b，且类型不通过，则返回true。
"==="全等，完全相同。$a等于$b，且类型相同，返回true


运算符	名称	例子		结果
and	与	$x and $y	如果 $x 和 $y 都为 true，则返回 true。

or	或	$x or $y	如果 $x 和 $y 至少有一个为 true，则返回 true。

xor	异或	$x xor $y	如果 $x 和 $y 有且仅有一个为 true，则返回 true。

&&	与	$x && $y	如果 $x 和 $y 都为 true，则返回 true。

||	或	$x || $y	如果 $x 和 $y 至少有一个为 true，则返回 true。

!	非	!$x		如果 $x 不为 true，则返回 true。



switch...case...匹配性质，可以有选择性质的执行若干代码块，可避免（？？）“if...elseif...else...”语句


function name($a,$b)
.
.
.
name("a", "b");
?>

function name($a=*)
.
.
.
name();//未定义值，将使用默认值
?>



数组排序：
・sort,rsort――升/降序排列
・asort,arsort――根据值升/降序排列
・ksort,krsort――根据键值升降序排列


超全局变量,无需执行global $variable即可访问/执行
・$GLOBALS
・$_SERVER
・$_REQUEST
・$_POST
・$_GET
・$_FILES
・$_ENV
・$_COOKIE
・$_SESSION


函数替换？！
在PHP中，可以使用$str_replace来替换函数
例如：
<?php
$a = 'Apple is nice.';
echo "$a";
?>   			==>Apple is nice.


此时，若使用str_replace替换函数,则：
<?php
$a = 'Apple is nice.';
$a = str_replacr('Apple','Orange',$a);
echo "$a";
?>			==>Orange is nice.



判断函数是否存在：
使用function_exists判断函数是否存在。【exists==>存在】
使用class_exists判断类是否存在。
*使用file_exists判断文件是都存在*

eg：

/*开始
<?php
$filename = '01.php';
if (!file_exists($filename))
{
	echo $filename.'not exists.';
 }
?>
结束*/


类的定义以class开始，后面跟着类的名称，类的名称通常首字母大写，以中括号开始和结束。
属性的定义以public开始。

类的实例化为对象时使用关键字new，new之后紧跟类的名称和一堆括号。

*对象中的成员属性、方法，可以通过符号‘->’来访问*


function __constru(){	}	//构造函数，在对象被实例化的时候默认调用
/*this是PHP里面的伪变量，表示函数自身。可以通过“this->的方式访问对象的属性和方法”*/

function __destruct(){ }	//析构函数，在程序执行结束时自动调用

通过把变量设置为null，可以触发析构函数。所以析构函数可以用于清理程序使用的资源，比如程序使用了打印纸，可以通过析构函数释放打印机资源



属性之public $name; protected $name; private $name。
public $name--可在外部进行调用；protected(受保护的) $name和private(私有的) $name不可在外部进行调用，但是可以在类的内部进行调用：return $this->xxx(变量名称)


类的定义的两种方式：
$className = Car;
$car = new className();
或
calss Car{
$car = new Car();
}


static:静态方法--不需要实例化对象(new)，直接调用，操作符号为双冒号::
class car
{
public static function getName();
return xxx;
}
echo car::getName();


关于include：
include与require语句相似，但是在产生错误时――
include会生成warning并继续运行脚本
require会生成errror并终止脚本
调用方法：
<?php	include	'filename.type'	?>


fopen	/*打开文件*/
fclose	/*关闭文件*/
feof	/*检测是否到达文件末端*/
fgets	/*逐行读取*/

$file = fopen ("filename.type","*");

"*"==>r,r+,w,w+,a,a+,x,x+;


cookie:
setcookie /*设置cookie*/
setrawcookie/*设置cookie(放置URL编码)*/

使用isset来确认是否设置了cookie：
<?php	isset($_COOKIE['name'])	 ?>

关于如何删除cookie？
/*使时间变更为设置的cookie的时长之前的时间*/
设置cookie：setrawcookie('name','value','time()+3600');/*设置一个时效为1h的cookie*/
删除cookie：setrawcookie('name','value','time()-3600');/*删除cookie*/

取回存储的cookie：$_COOKIE['name'];/*取回名字为name的cookie*/


PHP session:为访问者创建单一的id(UID)，并基于此UID来存储变量。
UID存储于cookie中并基于URL传导。
会话信息是临时的，如果需要，也可以进行存储。

启动会话：session_start,开始于<html>标签之前。
存储：$_SESSION['name']

使用unset或者session_destroy()来终结session

unset可以用来释放指定的session变量：unset($_SESSION['name']);
session_destroy将重置所有session，包括已存储的


构造函数与析构函数：
在类中，可以使用_construct()来定义一个构造函数/具有构造函数的类，通常用来进行一些初始化工作。
子类中定义了_construct()，则不会调用父类中的_construct
若需要同时调用，需使用parent::_construct()

析构函数：当某个对象的所有引用被删除/对象被显示的销毁时会执行此函数


class car{
	function _construct(){
		echo "此处构造函数被调用\n"；
	}
	function_destruct(){
		echo "此处析构函数被调用\n"；
	}
		$car = new car();
		......
	}




static静态关键字：
①使用双冒号“::”进行调用；
②不允许使用“->”进行调用；
③伪变量“$this”不允许使用；
④可以使用“self”“parent”“static”等在内部调用静态属性


【定义类{
	定义变量 初始化;
	定义函数()}】